import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    JobQueue
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "8105161394:AAH48_kSNunJuSMzmML4f0tfZrfquG1QgrY"
SPREADSHEET_NAME = "Telegram zayavki"
REMINDER_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_ID = 886922044  # –í–∞—à ID 1132625886  886922044
users_roles = {}  # {user_id: 'admin'/'dispatcher'/'technician'}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name("service_account.json", scope)
gs_client = gspread.authorize(creds)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
active_requests = {}
reminder_jobs = {}

def get_worksheet():
    try:
        return gs_client.open(SPREADSHEET_NAME).sheet1
    except gspread.SpreadsheetNotFound:
        worksheet = gs_client.create(SPREADSHEET_NAME)
        return worksheet.sheet1

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID or users_roles.get(user_id) == 'admin'

def is_dispatcher(user_id: int) -> bool:
    return users_roles.get(user_id) == 'dispatcher'

def is_technician(user_id: int) -> bool:
    return users_roles.get(user_id) == 'technician'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫.\n\n"
        "–§–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏:\n"
        "—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ...\n"
        "–ø—Ä–æ–±–ª–µ–º–∞: ...\n"
        "—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: ...\n"
        "–≥–æ—Å–Ω–æ–º–µ—Ä: ...\n"
        "–∞–≤—Ç–æ–ø–∞—Ä–∫: ..."
    )

async def set_dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        user_id = int(context.args[0])
        users_roles[user_id] = 'dispatcher'
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.")
        try:
            await context.bot.send_message(user_id, "–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!")
        except:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setdispatcher <user_id>")

async def set_technician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        user_id = int(context.args[0])
        users_roles[user_id] = 'technician'
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ—Ö–Ω–∏–∫–æ–º.")
        try:
            await context.bot.send_message(user_id, "–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–æ–º!")
        except:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settechnic <user_id>")

async def list_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not users_roles:
        await update.message.reply_text("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        return
    
    message = "–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π:\n"
    for user_id, role in users_roles.items():
        try:
            user = await context.bot.get_chat(user_id)
            message += f"{user.first_name} (ID: {user_id}) - {role}\n"
        except:
            message += f"ID: {user_id} - {role}\n"
    
    await update.message.reply_text(message)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    if is_dispatcher(user_id):
        await handle_dispatcher(update, context)
    elif is_technician(user_id):
        await handle_solution(update, context)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.")

async def handle_dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lines = text.split('\n')
    data = {}
    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            data[key.strip().lower()] = value.strip()

    required = ["—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ø—Ä–æ–±–ª–µ–º–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è", "–≥–æ—Å–Ω–æ–º–µ—Ä", "–∞–≤—Ç–æ–ø–∞—Ä–∫"]
    if not all(k in data for k in required):
        await update.message.reply_text("‚ùó –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù—É–∂–Ω–æ: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è, –≥–æ—Å–Ω–æ–º–µ—Ä, –∞–≤—Ç–æ–ø–∞—Ä–∫.")
        return

    request_id = str(datetime.now().timestamp())
    active_requests[request_id] = {
        "serial": data["—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"],
        "problem": data["–ø—Ä–æ–±–ª–µ–º–∞"],
        "phone": data["—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è"],
        "bus": data["–≥–æ—Å–Ω–æ–º–µ—Ä"],
        "garage": data["–∞–≤—Ç–æ–ø–∞—Ä–∫"],
        "created_time": datetime.now(),
        "accepted_time": None,
        "assigned": False,
        "tech_id": None,
        "status": None,
        "solution": None,
        "photo": None,
        "dispatcher_id": update.message.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    }

    text_message = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id[-4:]}*\n"
        f"üìü –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {data['—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {data['–ø—Ä–æ–±–ª–µ–º–∞']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {data['—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è']}\n"
        f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {data['–≥–æ—Å–Ω–æ–º–µ—Ä']}\n"
        f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {data['–∞–≤—Ç–æ–ø–∞—Ä–∫']}")

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{request_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{request_id}")
    ]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
    technicians = [uid for uid, role in users_roles.items() if role == 'technician']
    sent_to_technicians = False
    for tech_id in technicians:
        try:
            await context.bot.send_message(
                chat_id=tech_id, 
                text=text_message, 
                parse_mode="Markdown", 
                reply_markup=keyboard
            )
            sent_to_technicians = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Ö–Ω–∏–∫—É {tech_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if sent_to_technicians:
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id[-4:]} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞–º!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç–µ—Ö–Ω–∏–∫–∞–º. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤.")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
    if technicians:
        reminder_jobs[request_id] = context.job_queue.run_repeating(
            send_reminder,
            interval=REMINDER_INTERVAL,
            first=REMINDER_INTERVAL,
            data={'request_id': request_id},
            name=f'reminder_{request_id}'
        )

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    request_id = job.data['request_id']
    request = active_requests.get(request_id)
    
    if not request or request["assigned"]:
        if request_id in reminder_jobs:
            reminder_jobs[request_id].schedule_removal()
            del reminder_jobs[request_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if datetime.now() - request["created_time"] < timedelta(seconds=REMINDER_INTERVAL):
        return
    
    text_message = (
        f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞—è–≤–∫–∞ #{request_id[-4:]} –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞!*\n"
        f"üìü –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {request['serial']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {request['problem']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {request['phone']}\n"
        f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {request['bus']}\n"
        f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {request['garage']}\n\n"
        f"‚ùó –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
    technicians = [uid for uid, role in users_roles.items() if role == 'technician']
    for tech_id in technicians:
        try:
            await context.bot.send_message(
                chat_id=tech_id, 
                text=text_message, 
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫—É {tech_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    try:
        await context.bot.send_message(
            chat_id=request["dispatcher_id"],
            text=f"‚è∞ –ó–∞—è–≤–∫–∞ #{request_id[-4:]} –≤—Å–µ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, req_id = query.data.split(":")
    request = active_requests.get(req_id)

    if not request or request["assigned"]:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    request["assigned"] = True
    request["tech_id"] = query.from_user.id
    request["accepted_time"] = datetime.now()

    # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
    if req_id in reminder_jobs:
        reminder_jobs[req_id].schedule_removal()
        del reminder_jobs[req_id]

    if action == "accept":
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üü¢ –†–µ—à–µ–Ω–æ", callback_data=f"resolved:{req_id}"),
            InlineKeyboardButton("üî¥ –ù–µ —Ä–µ—à–µ–Ω–æ", callback_data=f"unresolved:{req_id}")
        ]])
        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É. –£–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
        for disp_id in dispatchers:
            try:
                await context.bot.send_message(
                    disp_id,
                    f"‚òëÔ∏è –ó–∞—è–≤–∫—É #{req_id[-4:]} –ø—Ä–∏–Ω—è–ª: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ {disp_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤
        technicians = [uid for uid, role in users_roles.items() if role == 'technician' and uid != query.from_user.id]
        for tech_id in technicians:
            try:
                await context.bot.send_message(
                    tech_id,
                    f"‚ÑπÔ∏è –ó–∞—è–≤–∫—É #{req_id[-4:]} —É–∂–µ –ø—Ä–∏–Ω—è–ª –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∞ {tech_id}: {e}")

    elif action == "reject":
        await query.edit_message_text("üîï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –æ–± –æ—Ç–∫–∞–∑–µ
        dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
        for disp_id in dispatchers:
            try:
                await context.bot.send_message(
                    disp_id,
                    f"‚ùå –ó–∞—è–≤–∫—É #{req_id[-4:]} –æ—Ç–∫–ª–æ–Ω–∏–ª: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ {disp_id}: {e}")

async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, req_id = query.data.split(":")
    request = active_requests.get(req_id)

    if request and query.from_user.id == request["tech_id"]:
        request["status"] = "–†–µ—à–µ–Ω–æ" if action == "resolved" else "–ù–µ —Ä–µ—à–µ–Ω–æ"
        await query.edit_message_text("‚úçÔ∏è –û–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É:")
    else:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É.")

async def handle_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    for req_id, req in active_requests.items():
        if req["tech_id"] == user_id and req["solution"] is None:
            req["solution"] = update.message.text
            await update.message.reply_text("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
            return

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    for req_id, req in active_requests.items():
        if req["tech_id"] == user_id and req["photo"] is None:
            req["photo"] = update.message.photo[-1].file_id

            caption = (
                f"üìÑ –ó–∞—è–≤–∫–∞ #{req_id[-4:]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
                f"üßë‚Äçüîß –¢–µ—Ö–Ω–∏–∫: {update.message.from_user.full_name}\n"
                f"üìü –°–µ—Ä–∏–π–Ω—ã–π: {req['serial']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {req['phone']}\n"
                f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {req['bus']}\n"
                f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {req['garage']}\n"
                f"üìÜ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {req['status']}\n"
                f"üìù –†–µ—à–µ–Ω–∏–µ: {req['solution']}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
            dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
            for disp_id in dispatchers:
                try:
                    await context.bot.send_photo(
                        chat_id=disp_id,
                        photo=req["photo"],
                        caption=caption
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É {disp_id}: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            try:
                worksheet = get_worksheet()
                worksheet.append_row([
                    req["created_time"].strftime("%Y-%m-%d"),
                    req["created_time"].strftime("%H:%M:%S"),
                    req["accepted_time"].strftime("%H:%M:%S") if req["accepted_time"] else "",
                    datetime.now().strftime("%H:%M:%S"),
                    req["serial"],
                    req["problem"],
                    req["phone"],
                    req["bus"],
                    req["garage"],
                    update.message.from_user.full_name,
                    req["status"],
                    req["solution"],
                    req["photo"]
                ])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

            await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
            return

async def list_technician_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_technician(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    message = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    has_applications = False
    
    for req_id, req in active_requests.items():
        if req["tech_id"] == user_id:
            has_applications = True
            status = "üü¢ –†–µ—à–µ–Ω–∞" if req["status"] == "–†–µ—à–µ–Ω–æ" else "üü† –í —Ä–∞–±–æ—Ç–µ" if req["status"] else "üî¥ –ù–µ —Ä–µ—à–µ–Ω–∞"
            message += (
                f"üìå –ó–∞—è–≤–∫–∞ #{req_id[-4:]} –æ—Ç {req['created_time'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìü –°–µ—Ä–∏–π–Ω—ã–π: {req['serial']}\n"
                f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n"
                f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {req['garage']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
                f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {req['bus']}\n"
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
    
    if not has_applications:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
    
    await update.message.reply_text(message)

async def list_active_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_technician(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    has_active = False
    
    for req_id, req in active_requests.items():
        if req["tech_id"] == user_id and not req["photo"]:
            has_active = True
            status = "üü† –í —Ä–∞–±–æ—Ç–µ" if req["status"] else "üü° –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"
            message += (
                f"üìå –ó–∞—è–≤–∫–∞ #{req_id[-4:]} –æ—Ç {req['created_time'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìü –°–µ—Ä–∏–π–Ω—ã–π: {req['serial']}\n"
                f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n"
                f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {req['garage']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
                f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {req['bus']}\n"
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
    
    if not has_active:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    
    await update.message.reply_text(message)

def main():
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    users_roles[ADMIN_ID] = 'admin'

    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .concurrent_updates(True)  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        .build()
    )
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("setdispatcher", set_dispatcher))
    app.add_handler(CommandHandler("settechnic", set_technician))
    app.add_handler(CommandHandler("roles", list_roles))
    app.add_handler(CommandHandler("allmyapplication", list_technician_applications))
    app.add_handler(CommandHandler("activeapplication", list_active_applications))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_response, pattern="^(accept|reject):"))
    app.add_handler(CallbackQueryHandler(handle_status, pattern="^(resolved|unresolved):"))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()