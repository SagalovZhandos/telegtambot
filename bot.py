import os
import logging
import csv
import threading
from datetime import datetime, timedelta
from typing import Dict, List
import asyncio
import time
import base64   

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot_actions.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = "Telegram zayavki"
REMINDER_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
ADMIN_IDS = [1132625886, 886922044]  # ID –∞–¥–º–∏–Ω–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTERING_SOLUTION, ENTERING_PHOTO = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
users_roles = {}  # {user_id: 'admin'/'dispatcher'/'technician'}
applications = {}  # {application_id: application_data}
current_applications = {}  # {technician_id: application_id}s
application_counter = 0
pending_notifications = {}  # {application_id: timer_thread}
statistics = {
    'total_applications': 0,
    'resolved_applications': 0,
    'avg_resolution_time': 0,
    'technician_stats': {},
    'dispatcher_stats': {}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_json = base64.b64decode(os.getenv("GOOGLE_CREDENTIALS")).decode()
creds = ServiceAccountCredentials.from_json_keyfile_dict(eval(creds_json), scope)



def get_worksheet():
    try:
        return gs_client.open(SPREADSHEET_NAME).sheet1
    except gspread.SpreadsheetNotFound:
        worksheet = gs_client.create(SPREADSHEET_NAME)
        return worksheet.sheet1

def log_action(user_id: int, action: str, details: str = "") -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    try:
        with open('user_actions.csv', 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([timestamp, user_id, action, details])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

def start_notification_timer(app_id: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–µ"""
    def notify_technicians():
        time.sleep(REMINDER_INTERVAL)
        if app_id in applications and applications[app_id]['status'] == 'active':
            technicians = [uid for uid, role in users_roles.items() if role == 'technician']
            for tech_id in technicians:
                try:
                    context.bot.send_message(
                        chat_id=tech_id,
                        text=f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ ‚Ññ{app_id} –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è!\n"
                             f"–ü—Ä–æ–±–ª–µ–º–∞: {applications[app_id]['problem']}"
                    )
                    log_action(tech_id, 'reminder_sent', f'application_{app_id}')
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫—É {tech_id}: {e}")
    
    thread = threading.Thread(target=notify_technicians)
    thread.start()
    pending_notifications[app_id] = thread

def update_statistics(app_id: str, action: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
    app = applications[app_id]
    
    if action == 'created':
        statistics['total_applications'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dispatcher_id = app['dispatcher_id']
        if dispatcher_id not in statistics['dispatcher_stats']:
            statistics['dispatcher_stats'][dispatcher_id] = {'created': 0}
        statistics['dispatcher_stats'][dispatcher_id]['created'] += 1
    
    elif action == 'resolved':
        statistics['resolved_applications'] += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
        created_time = datetime.strptime(app['created_time'], '%Y-%m-%d %H:%M:%S')
        resolved_time = datetime.strptime(app['resolved_time'], '%Y-%m-%d %H:%M:%S')
        resolution_time = (resolved_time - created_time).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        total_time = statistics['avg_resolution_time'] * (statistics['resolved_applications'] - 1)
        statistics['avg_resolution_time'] = (total_time + resolution_time) / statistics['resolved_applications']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Ö–Ω–∏–∫–∞
        technician_id = app['technician_id']
        if technician_id not in statistics['technician_stats']:
            statistics['technician_stats'][technician_id] = {'resolved': 0, 'avg_time': 0}
        
        tech_stats = statistics['technician_stats'][technician_id]
        total_tech_time = tech_stats['avg_time'] * tech_stats['resolved']
        tech_stats['resolved'] += 1
        tech_stats['avg_time'] = (total_tech_time + resolution_time) / tech_stats['resolved']

def generate_report() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:\n\n"
    
    report += f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {statistics['total_applications']}\n"
    if statistics['total_applications'] > 0:
        report += f"–†–µ—à–µ–Ω–æ –∑–∞—è–≤–æ–∫: {statistics['resolved_applications']} ({statistics['resolved_applications']/statistics['total_applications']*100:.1f}%)\n"
    else:
        report += "–†–µ—à–µ–Ω–æ –∑–∞—è–≤–æ–∫: 0 (0%)\n"
    
    report += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {statistics['avg_resolution_time']:.1f} –º–∏–Ω.\n\n"
    
    report += "üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤:\n"
    for disp_id, stats in statistics['dispatcher_stats'].items():
        report += f"- ID {disp_id}: —Å–æ–∑–¥–∞–Ω–æ {stats['created']} –∑–∞—è–≤–æ–∫\n"
    
    report += "\nüîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ö–Ω–∏–∫–æ–≤:\n"
    for tech_id, stats in statistics['technician_stats'].items():
        report += f"- ID {tech_id}: —Ä–µ—à–µ–Ω–æ {stats['resolved']} –∑–∞—è–≤–æ–∫, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {stats['avg_time']:.1f} –º–∏–Ω.\n"
    
    return report

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS and user_id not in users_roles:
        users_roles[user_id] = 'admin'
        log_action(user_id, 'admin_login')
        await update.message.reply_text('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
    elif user_id in users_roles:
        role = users_roles[user_id]
        log_action(user_id, 'user_login')
        await update.message.reply_text(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {role.capitalize()}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
    else:
        log_action(user_id, 'unauthorized_login_attempt')
        await update.message.reply_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles:
        await update.message.reply_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
        return
    
    role = users_roles[user_id]
    
    if role == 'admin':
        text = """
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:
/setdispatcher - –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
/settechnic - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞
/removetechnic - —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞ 
/removedispatcher - —É–¥–∞–ª–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
/roles - –≤—Å–µ —Ä–æ–ª–∏ —Å –∏–º–µ–Ω–∞–º–∏
/activeapplications - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
/allapplication - –≤—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ –¥–µ–Ω—å
/report - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/exportlogs - —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        """
    elif role == 'dispatcher':
        text = """
–ö–æ–º–∞–Ω–¥—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:
/activeapplications - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
/allapplication - –≤—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ –¥–µ–Ω—å
/report - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        """
    elif role == 'technician':
        text = """
–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∞:
/myapplications - –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∞
/activeapplication - —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞
        """
    
    await update.message.reply_text(text)
    log_action(user_id, 'help_requested')

async def set_dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and users_roles.get(user_id) != 'admin':
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        new_dispatcher_id = int(context.args[0])
        users_roles[new_dispatcher_id] = 'dispatcher'
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_dispatcher_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.")
        log_action(user_id, 'set_dispatcher', f'user_{new_dispatcher_id}')
        
        try:
            await context.bot.send_message(
                chat_id=new_dispatcher_id,
                text="–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_dispatcher_id}.")
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setdispatcher <user_id>")

async def set_technician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and users_roles.get(user_id) != 'admin':
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        new_technician_id = int(context.args[0])
        users_roles[new_technician_id] = 'technician'
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_technician_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ—Ö–Ω–∏–∫–æ–º.")
        log_action(user_id, 'set_technician', f'user_{new_technician_id}')
        
        try:
            await context.bot.send_message(
                chat_id=new_technician_id,
                text="–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_technician_id}.")
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∞: {e}")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settechnic <user_id>")

async def remove_technician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and users_roles.get(user_id) != 'admin':
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        technician_id = int(context.args[0])
        if users_roles.get(technician_id) == 'technician':
            del users_roles[technician_id]
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {technician_id} –±–æ–ª—å—à–µ –Ω–µ —Ç–µ—Ö–Ω–∏–∫.")
            log_action(user_id, 'remove_technician', f'user_{technician_id}')
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–æ–º.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removetechnic <user_id>")

async def remove_dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and users_roles.get(user_id) != 'admin':
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        dispatcher_id = int(context.args[0])
        if users_roles.get(dispatcher_id) == 'dispatcher':
            del users_roles[dispatcher_id]
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dispatcher_id} –±–æ–ª—å—à–µ –Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.")
            log_action(user_id, 'remove_dispatcher', f'user_{dispatcher_id}')
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removedispatcher <user_id>")

async def list_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and users_roles.get(user_id) != 'admin':
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not users_roles:
        await update.message.reply_text("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        return
    
    message = "–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π:\n"
    for user_id, role in users_roles.items():
        try:
            user = await context.bot.get_chat(user_id)
            message += f"{user.first_name} (ID: {user_id}) - {role}\n"
        except:
            message += f"ID: {user_id} - {role}\n"
    
    await update.message.reply_text(message)
    log_action(user_id, 'list_roles_viewed')

async def active_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles:
        await update.message.reply_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
        return
    
    active_apps = [app for app in applications.values() if app['status'] == 'active']
    
    if not active_apps:
        await update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.')
        return
    
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for app in active_apps:
        text += f"–ó–∞—è–≤–∫–∞ ‚Ññ{app['id']}\n"
        text += f"–°–µ—Ä. –Ω–æ–º–µ—Ä: {app['serial']}\n"
        text += f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {app['bus']}\n"
        text += f"–ê–≤—Ç–æ–ø–∞—Ä–∫: {app['garage']}\n"
        text += f"–í–æ–¥–∏—Ç–µ–ª—å: {app['phone']}\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: {app['problem']}\n"
        text += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {app['created_time']}\n\n"
    
    await update.message.reply_text(text)
    log_action(user_id, 'viewed_active_applications')

async def all_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles:
        await update.message.reply_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
        return
    
    today = datetime.now().strftime('%Y-%m-%d')
    today_apps = [app for app in applications.values() if app['created_time'].startswith(today)]
    
    if not today_apps:
        await update.message.reply_text('–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∑–∞—è–≤–æ–∫.')
        return
    
    text = f"–í—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ {today}:\n\n"
    for app in today_apps:
        status = "–ê–∫—Ç–∏–≤–Ω–∞—è" if app['status'] == 'active' else "–†–µ—à–µ–Ω–∞"
        text += f"–ó–∞—è–≤–∫–∞ ‚Ññ{app['id']} ({status})\n"
        text += f"–°–µ—Ä. –Ω–æ–º–µ—Ä: {app['serial']}\n"
        text += f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {app['bus']}\n"
        text += f"–ê–≤—Ç–æ–ø–∞—Ä–∫: {app['garage']}\n"
        text += f"–í–æ–¥–∏—Ç–µ–ª—å: {app['phone']}\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: {app['problem']}\n"
        if app['status'] == 'resolved':
            text += f"–†–µ—à–µ–Ω–∏–µ: {app['solution']}\n"
            text += f"–¢–µ—Ö–Ω–∏–∫: {app['technician_name']}\n"
            text += f"–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {app['resolved_time']}\n"
        text += "\n"
    
    await update.message.reply_text(text)
    log_action(user_id, 'viewed_all_applications')

async def my_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles or users_roles[user_id] != 'technician':
        await update.message.reply_text('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤.')
        return
    
    my_apps = [app for app in applications.values() if app.get('technician_id') == user_id and app['status'] == 'resolved']
    
    if not my_apps:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.')
        return
    
    text = "–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for app in my_apps:
        text += f"–ó–∞—è–≤–∫–∞ ‚Ññ{app['id']}\n"
        text += f"–°–µ—Ä. –Ω–æ–º–µ—Ä: {app['serial']}\n"
        text += f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {app['bus']}\n"
        text += f"–ê–≤—Ç–æ–ø–∞—Ä–∫: {app['garage']}\n"
        text += f"–í–æ–¥–∏—Ç–µ–ª—å: {app['phone']}\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: {app['problem']}\n"
        text += f"–†–µ—à–µ–Ω–∏–µ: {app['solution']}\n"
        text += f"–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {app['resolved_time']}\n\n"
    
    await update.message.reply_text(text)
    log_action(user_id, 'viewed_my_applications')

async def current_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles or users_roles[user_id] != 'technician':
        await update.message.reply_text('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤.')
        return
    
    if user_id not in current_applications:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏.')
        return
    
    app_id = current_applications[user_id]
    app = applications[app_id]
    
    text = f"–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{app['id']}:\n"
    text += f"–°–µ—Ä. –Ω–æ–º–µ—Ä: {app['serial']}\n"
    text += f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {app['bus']}\n"
    text += f"–ê–≤—Ç–æ–ø–∞—Ä–∫: {app['garage']}\n"
    text += f"–í–æ–¥–∏—Ç–µ–ª—å: {app['phone']}\n"
    text += f"–ü—Ä–æ–±–ª–µ–º–∞: {app['problem']}\n"
    text += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {app['created_time']}\n"
    
    await update.message.reply_text(text)
    log_action(user_id, 'viewed_current_application', f'application_{app_id}')

async def handle_dispatcher_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles or users_roles[user_id] != 'dispatcher':
        await update.message.reply_text('–í—ã –Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.')
        return
    
    text = update.message.text.strip()
    lines = text.split('\n')
    data = {}
    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            data[key.strip().lower()] = value.strip()

    required = ["—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ø—Ä–æ–±–ª–µ–º–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è", "–≥–æ—Å–Ω–æ–º–µ—Ä", "–∞–≤—Ç–æ–ø–∞—Ä–∫"]
    if not all(k in data for k in required):
        await update.message.reply_text("‚ùó –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù—É–∂–Ω–æ: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è, –≥–æ—Å–Ω–æ–º–µ—Ä, –∞–≤—Ç–æ–ø–∞—Ä–∫.")
        return

    global application_counter
    application_counter += 1
    app_id = str(application_counter)
    
    applications[app_id] = {
        "id": app_id,
        "serial": data["—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"],
        "problem": data["–ø—Ä–æ–±–ª–µ–º–∞"],
        "phone": data["—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è"],
        "bus": data["–≥–æ—Å–Ω–æ–º–µ—Ä"],
        "garage": data["–∞–≤—Ç–æ–ø–∞—Ä–∫"],
        "status": "active",
        "created_time": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "dispatcher_id": user_id,
        "dispatcher_name": update.effective_user.full_name,
        "technician_id": None,
        "technician_name": None,
        "solution": None,
        "photo": None,
        "resolved_time": None
    }
    
    log_action(user_id, 'application_created', f'application_{app_id}')
    update_statistics(app_id, 'created')
    
    text_message = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}*\n"
        f"üìü –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {data['—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {data['–ø—Ä–æ–±–ª–µ–º–∞']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {data['—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è']}\n"
        f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {data['–≥–æ—Å–Ω–æ–º–µ—Ä']}\n"
        f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {data['–∞–≤—Ç–æ–ø–∞—Ä–∫']}")

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{app_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{app_id}")
    ]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
    technicians = [uid for uid, role in users_roles.items() if role == 'technician']
    sent_to_technicians = False
    for tech_id in technicians:
        try:
            await context.bot.send_message(
                chat_id=tech_id, 
                text=text_message, 
                parse_mode="Markdown", 
                reply_markup=keyboard
            )
            sent_to_technicians = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Ö–Ω–∏–∫—É {tech_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if sent_to_technicians:
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞–º!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç–µ—Ö–Ω–∏–∫–∞–º. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤.")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if technicians:
        start_notification_timer(app_id, context)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id not in users_roles or users_roles[user_id] != 'technician':
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    
    action, app_id = query.data.split(":")
    if app_id not in applications or applications[app_id]['status'] != 'active':
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    
    applications[app_id]['status'] = 'in_progress'
    applications[app_id]['technician_id'] = user_id
    applications[app_id]['technician_name'] = query.from_user.full_name
    current_applications[user_id] = app_id
    
    # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if app_id in pending_notifications:
        pending_notifications[app_id].join()
        del pending_notifications[app_id]
    
    log_action(user_id, 'application_accepted', f'application_{app_id}')
    
    if action == "accept":
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üü¢ –†–µ—à–µ–Ω–æ", callback_data=f"resolved:{app_id}"),
            InlineKeyboardButton("üî¥ –ù–µ —Ä–µ—à–µ–Ω–æ", callback_data=f"unresolved:{app_id}")
        ]])
        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É. –£–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
        for disp_id in dispatchers:
            try:
                await context.bot.send_message(
                    disp_id,
                    f"‚òëÔ∏è –ó–∞—è–≤–∫—É #{app_id} –ø—Ä–∏–Ω—è–ª: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ {disp_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤
        technicians = [uid for uid, role in users_roles.items() if role == 'technician' and uid != user_id]
        for tech_id in technicians:
            try:
                await context.bot.send_message(
                    tech_id,
                    f"‚ÑπÔ∏è –ó–∞—è–≤–∫—É #{app_id} —É–∂–µ –ø—Ä–∏–Ω—è–ª –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∞ {tech_id}: {e}")

    elif action == "reject":
        await query.edit_message_text("üîï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")
        log_action(user_id, 'application_rejected', f'application_{app_id}')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –æ–± –æ—Ç–∫–∞–∑–µ
        dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
        for disp_id in dispatchers:
            try:
                await context.bot.send_message(
                    disp_id,
                    f"‚ùå –ó–∞—è–≤–∫—É #{app_id} –æ—Ç–∫–ª–æ–Ω–∏–ª: {query.from_user.full_name}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ {disp_id}: {e}")

async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    action, app_id = query.data.split(":")
    if app_id not in applications or applications[app_id]['technician_id'] != user_id:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É.")
        return
    
    applications[app_id]['status'] = "–†–µ—à–µ–Ω–æ" if action == "resolved" else "–ù–µ —Ä–µ—à–µ–Ω–æ"
    await query.edit_message_text("‚úçÔ∏è –û–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É:")
    return ENTERING_SOLUTION

async def enter_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in current_applications:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.')
        return ConversationHandler.END
    
    app_id = current_applications[user_id]
    applications[app_id]['solution'] = update.message.text
    log_action(user_id, 'solution_entered', f'application_{app_id}')
    
    await update.message.reply_text('üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')
    return ENTERING_PHOTO

async def enter_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in current_applications:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.')
        return ConversationHandler.END
    
    app_id = current_applications[user_id]
    application = applications[app_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f'photos/application_{app_id}.jpg'
    os.makedirs('photos', exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    application['status'] = 'resolved'
    application['resolved_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    application['photo'] = photo_path
    
    log_action(user_id, 'photo_uploaded', f'application_{app_id}')
    update_statistics(app_id, 'resolved')
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö
    del current_applications[user_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
    caption = (
        f"üìÑ –ó–∞—è–≤–∫–∞ #{app_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
        f"üßë‚Äçüîß –¢–µ—Ö–Ω–∏–∫: {update.message.from_user.full_name}\n"
        f"üìü –°–µ—Ä–∏–π–Ω—ã–π: {application['serial']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {application['phone']}\n"
        f"üöå –ì–æ—Å–Ω–æ–º–µ—Ä: {application['bus']}\n"
        f"üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: {application['garage']}\n"
        f"üìÜ –î–∞—Ç–∞: {application['resolved_time']}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {application['status']}\n"
        f"üìù –†–µ—à–µ–Ω–∏–µ: {application['solution']}")

    dispatchers = [uid for uid, role in users_roles.items() if role == 'dispatcher']
    for disp_id in dispatchers:
        try:
            await context.bot.send_photo(
                chat_id=disp_id,
                photo=open(photo_path, 'rb'),
                caption=caption
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É {disp_id}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    try:
        worksheet = get_worksheet()
        worksheet.append_row([
            application['created_time'],
            application['serial'],
            application['bus'],
            application['garage'],
            application['phone'],
            application['problem'],
            application['status'],
            application['solution'],
            application['resolved_time'],
            application['dispatcher_name'],
            application['technician_name'],
            photo_path
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{app_id} –≤ Google Sheets: {e}"
        )

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    return ConversationHandler.END

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_roles or users_roles[user_id] not in ['admin', 'dispatcher']:
        await update.message.reply_text('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤.')
        return
    
    report = generate_report()
    await update.message.reply_text(report)
    log_action(user_id, 'report_generated')

async def export_logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.')
        return
    
    try:
        with open('user_actions.csv', 'rb') as f:
            await context.bot.send_document(
                chat_id=update.effective_user.id,
                document=f,
                filename=f'actions_log_{datetime.now().date()}.csv'
            )
        log_action(update.effective_user.id, 'logs_exported')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–æ–≤: {e}')
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–æ–≤: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    log_action(user_id, 'operation_cancelled')
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    
    if update and update.effective_user:
        log_action(update.effective_user.id if update else 'system', 'error_occurred', str(context.error))
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.effective_user.id}: {context.error}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    os.makedirs('photos', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    if not os.path.exists('user_actions.csv'):
        with open('user_actions.csv', 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['timestamp', 'user_id', 'action', 'details'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for admin_id in ADMIN_IDS:
        users_roles[admin_id] = 'admin'

    # –°–æ–∑–¥–∞–µ–º Application
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("setdispatcher", set_dispatcher))
    app.add_handler(CommandHandler("settechnic", set_technician))
    app.add_handler(CommandHandler("removetechnic", remove_technician))
    app.add_handler(CommandHandler("removedispatcher", remove_dispatcher))
    app.add_handler(CommandHandler("roles", list_roles))
    app.add_handler(CommandHandler("activeapplications", active_applications))
    app.add_handler(CommandHandler("allapplication", all_applications))
    app.add_handler(CommandHandler("myapplications", my_applications))
    app.add_handler(CommandHandler("activeapplication", current_application))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CommandHandler("exportlogs", export_logs_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.User(users_roles.get('dispatcher', [])), handle_dispatcher_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤
    app.add_handler(CallbackQueryHandler(handle_response, pattern="^(accept|reject):"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
    tech_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_status, pattern="^(resolved|unresolved):")],
        states={
            ENTERING_SOLUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_solution)],
            ENTERING_PHOTO: [MessageHandler(filters.PHOTO, enter_photo)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(tech_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

     # –î–ª—è Railway (—á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏–ª–æ—Å—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    if "RAILWAY_ENVIRONMENT" in os.environ:
        import threading
        from flask import Flask
        
        # –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        web = Flask(__name__)
        
        @web.route("/")
        def home():
            return "Telegram Bot is running!"
        
        def run_flask():
            web.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
        
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()


    app.run_polling()

if __name__ == "__main__":
    main()